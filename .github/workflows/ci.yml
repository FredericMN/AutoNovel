name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # 安装 flake8 并进行基本检查
        pip install flake8
        # 停止构建如果有 Python 语法错误或未定义的名称
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 退出时将复杂度视为警告，GitHub 编辑器的宽度为 127 个字符
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test import modules
      run: |
        # 基本的导入测试
        python -c "from core.config.config_manager import ConfigManager; print('Core modules import successful')"
        python -c "from core.adapters.llm_adapters import create_llm_adapter; print('LLM adapters import successful')"
        python -c "from core.prompting.prompt_manager import PromptManager; print('Prompt manager import successful')"

  dependency-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Check dependencies for security vulnerabilities
      run: |
        # 检查依赖项的安全漏洞
        safety check --json  # 检测到安全问题时直接失败，便于及时处理
